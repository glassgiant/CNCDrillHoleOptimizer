//CNC drill hole optimizer
//by Shawn Wilson Sept 2019
//
//Takes a JS array of X/Y coords and does a rough optimization on them to reduce travel time for CNC milling a bunch of drill operations.
//Spits the original travel distance and optimized travel distance out to console.
//Originally designed to optimize CNC milling cribbage boards (361 holes)
//displays original path in GRAY, optimized in RED
//Start hole is GREEN.  Last hole is RED.

//FUTURE FEATURE POSSIBILITIES
//calculate the multiplier automatically
//remove the hard-coded values for GCode options (safety height, feed rate, etc.) and Canvas colors, stroke widths, etc.
//Make the HTML/CSS more MVC

multiplier = 50;  //what to multiply the coords by to get pixels.  I typically work with stuff 6-12 inches on a side, so 50-100 is a good range for me

//Optimization will not change the FIRST element in the points array. Indices: 0=x, 1=y
//replace this array with yours
var points = [
[2.0036, 9.5654],
[10.3307, 6.0335],
[10.3255, 5.8547],
[10.3135, 5.6761],
[10.2947, 5.4982],
[10.2805, 6.7578],
[10.2689, 5.3211],
[10.2507, 6.9346],
[10.2142, 7.1103],
[10.1971, 4.9706],
[10.1709, 7.272],
[10.1511, 4.7977],
[10.1375, 6.034],
[10.1325, 5.8613],
[10.121, 7.4439],
[10.1208, 5.6889],
[10.0985, 4.6266],
[10.1024, 5.5171],
[10.0888, 6.7226],
[10.0774, 5.3461],
[10.0599, 6.893],
[10.0395, 4.4577],
[10.0245, 7.0621],
[10.0076, 5.0078],
[10.0018, 7.7813],
[9.9825, 7.2297],
[9.974, 4.2911],
[9.9636, 4.8438],
[9.9327, 7.9464],
[9.9434, 6.041],
[9.934, 7.3956],
[9.9387, 5.875],
[9.9276, 5.7091],
[9.9126, 4.6791],
[9.9102, 5.5439],
[9.8954, 6.7034],
[9.8862, 5.3794],
[9.8674, 6.8672],
[9.8575, 8.1088],
[9.8553, 4.5186],
[9.8329, 7.0298],
[9.8246, 3.9658],
[9.8182, 7.7211],
[9.8191, 5.0539],
[9.7918, 4.3586],
[9.7921, 7.1909],
[9.7762, 8.2683],
[9.7761, 4.8934],
[9.751, 7.8803],
[9.7409, 3.8075],
[9.745, 7.3503],
[9.7269, 4.7347],
[9.6892, 8.4248],
[9.6779, 8.037],
[9.6715, 4.5779],
[9.6515, 3.6524],
[9.6458, 4.0444],
[9.6326, 7.663],
[9.6102, 4.4235],
[9.5989, 8.1907],
[9.5674, 7.8159],
[9.5645, 3.8921],
[9.5565, 3.5006],
[9.5143, 8.3415],
[9.4983, 8.7277],
[9.4964, 7.9663],
[9.4769, 3.7391],
[9.47, 4.122],
[9.4561, 3.3524],
[9.4199, 8.1139],
[9.3948, 8.8739],
[9.3914, 3.9755],
[9.3846, 3.5928],
[9.3378, 8.2585],
[9.3288, 8.6333],
[9.3076, 3.8319],
[9.2863, 9.0162],
[9.2871, 3.4499],
[9.24, 3.0675],
[9.2284, 8.7741],
[9.2185, 3.6914],
[9.1717, 9.1527],
[9.1583, 8.5385],
[9.1222, 2.9332],
[9.1233, 8.9109],
[9.1244, 3.5542],
[9.0769, 3.1742],
[9.061, 8.6735],
[9.0505, 9.2846],
[9.0111, 9.0411],
[8.9992, 2.8029],
[8.9617, 3.0462],
[8.9596, 8.8043],
[8.9219, 3.2927],
[8.8925, 9.1675],
[8.8722, 2.6758],
[8.8499, 8.9277],
[8.8414, 2.9208],
[8.8103, 3.1835],
[8.7961, 9.5381],
[8.7419, 2.5524],
[8.7345, 9.0486],
[8.7182, 2.7984],
[8.6938, 3.0635],
[8.6639, 9.6587],
[8.6459, 9.4117],
[8.5924, 2.6792],
[8.5751, 2.9457],
[8.527, 9.773],
[8.5183, 9.5286],
[8.4964, 9.2836],
[8.4686, 2.3225],
[8.4543, 2.8308],
[8.3859, 9.638],
[8.3846, 9.8815],
[8.3742, 9.396],
[8.328, 2.4583],
[8.3247, 2.2159],
[8.2478, 9.7422],
[8.2464, 9.5005],
[8.2385, 9.9853],
[8.1996, 2.6068],
[8.1884, 2.3561],
[8.1772, 2.1142],
[8.113, 9.6001],
[8.1062, 9.8417],
[8.065, 2.5066],
[8.0454, 2.2586],
[8.0263, 2.0176],
[7.9764, 9.6951],
[7.9362, 10.1775],
[7.9273, 2.4133],
[7.8992, 2.1662],
[7.8721, 1.9264],
[7.8133, 10.0257],
[7.7864, 2.3247],
[7.7802, 10.2655],
[7.7498, 2.079],
[7.6938, 9.8707],
[7.6622, 10.1098],
[7.6425, 2.2413],
[7.6212, 10.3479],
[7.5547, 1.7606],
[7.548, 9.9508],
[7.5082, 10.1887],
[7.4594, 10.425],
[7.4423, 1.9209],
[7.3995, 10.0258],
[7.3917, 1.6864],
[7.3515, 10.2619],
[7.3462, 2.09],
[7.2949, 10.4959],
[7.2845, 1.8503],
[7.2483, 10.0953],
[7.2262, 1.6181],
[7.1942, 2.0226],
[7.1922, 10.3293],
[7.1242, 1.7854],
[7.0948, 10.1593],
[7.0584, 1.5557],
[7.0398, 1.9608],
[6.9617, 1.7264],
[6.9589, 10.6197],
[6.8883, 1.4996],
[6.8833, 1.9047],
[6.8669, 10.4465],
[6.7971, 1.6734],
[6.7877, 10.6724],
[6.7811, 10.27],
[6.7248, 1.8543],
[6.7012, 10.4962],
[6.6215, 10.3168],
[6.6147, 10.7187],
[6.5339, 10.5397],
[6.4602, 10.3572],
[6.4402, 10.759],
[6.3651, 10.5773],
[6.3654, 1.3532],
[6.2976, 10.3925],
[6.2885, 1.5298],
[6.2644, 10.7931],
[6.2004, 1.7107],
[6.195, 10.6089],
[6.1801, 1.3258],
[6.1338, 10.422],
[6.0985, 1.5036],
[6.0076, 1.6757],
[6.0188, 1.2728],
[5.9114, 10.9069],
[5.8976, 1.162],
[5.8878, 1.4524],
[5.8665, 11.0826],
[5.8534, 10.7047],
[5.8468, 1.0135],
[5.8064, 11.2279],
[5.8042, 1.618],
[5.7964, 10.5112],
[5.7365, 1.3522],
[5.7198, 10.843],
[5.7164, 11.3583],
[5.687, 11.016],
[5.6854, 1.1804],
[5.65, 10.6162],
[5.6379, 0.6996],
[5.6299, 11.1578],
[5.6267, 1.5199],
[5.6027, 11.4691],
[5.5395, 10.7635],
[5.5328, 11.2778],
[5.531, 0.8581],
[5.5362, 1.3559],
[5.5022, 10.9398],
[5.4551, 11.0779],
[5.4308, 0.5693],
[5.425, 1.0228],
[5.3648, 0.7525],
[5.2998, 0.9377],
[5.2471, 11.6299],
[5.2113, 0.5041],
[5.2051, 11.2387],
[5.2048, 11.4401],
[5.1814, 0.6962],
[5.1506, 0.8895],
[5.0737, 11.6563],
[5.0592, 11.4623],
[5.0483, 11.2669],
[5.0165, 0.4803],
[5.0084, 0.6747],
[4.9914, 0.8697],
[4.8983, 11.6656],
[4.8944, 11.471],
[4.8846, 11.2754],
[4.8331, 0.6684],
[4.8314, 0.4736],
[4.8257, 0.8641],
[4.7313, 11.669],
[4.7276, 11.4744],
[4.7172, 11.2787],
[4.5641, 11.6707],
[4.5604, 11.4762],
[4.5501, 11.2805],
[4.491, 0.8599],
[4.4888, 0.6642],
[4.482, 0.4696],
[4.3231, 0.859],
[4.3207, 0.6633],
[4.3136, 0.4689],
[4.2289, 11.6723],
[4.2252, 11.4779],
[4.2151, 11.2823],
[4.1541, 0.8585],
[4.1517, 0.6629],
[4.1446, 0.4684],
[4.0657, 11.6726],
[4.0622, 11.4782],
[4.0526, 11.2826],
[3.9947, 0.8582],
[3.9924, 0.6626],
[3.9855, 0.4682],
[3.8977, 11.6727],
[3.8937, 11.4783],
[3.8831, 11.2828],
[3.8188, 0.8581],
[3.8162, 0.6625],
[3.8086, 0.4681],
[3.7158, 11.6728],
[3.7119, 11.4784],
[3.7013, 11.2828],
[3.5438, 11.6727],
[3.5401, 11.4783],
[3.5302, 11.2828],
[3.4727, 0.8581],
[3.4705, 0.6626],
[3.464, 0.4682],
[3.3091, 0.8582],
[3.3065, 0.6626],
[3.2991, 0.4682],
[3.2092, 11.6726],
[3.2053, 11.4782],
[3.2025, 11.2809],
[3.1358, 0.8583],
[3.1336, 0.6627],
[3.127, 0.4684],
[3.046, 11.6725],
[3.0425, 11.4781],
[3.0406, 11.2807],
[2.9753, 0.8585],
[2.9726, 0.663],
[2.965, 0.4686],
[2.8742, 11.6722],
[2.8704, 11.4778],
[2.8675, 11.2805],
[2.8016, 0.8588],
[2.7995, 0.6633],
[2.793, 0.4689],
[2.7149, 11.6718],
[2.711, 11.4774],
[2.7078, 11.28],
[2.5453, 11.671],
[2.5416, 11.4766],
[2.5393, 11.2792],
[2.4765, 0.8605],
[2.4615, 0.6654],
[2.4472, 0.4715],
[2.3308, 0.8921],
[2.228, 0.9848],
[2.2026, 11.0747],
[2.266, 11.2298],
[2.2354, 0.7209],
[2.1991, 1.1266],
[2.1992, 10.9081],
[2.1992, 10.74],
[2.1992, 10.572],
[2.1992, 10.236],
[2.1992, 10.068],
[2.1992, 9.8999],
[2.1992, 9.7319],
[2.1992, 9.5639],
[2.1992, 2.3004],
[2.1992, 2.1324],
[2.1992, 1.9644],
[2.1992, 1.7964],
[2.1992, 1.6283],
[2.1992, 1.2923],
[2.1337, 0.5546],
[2.1302, 11.3599],
[2.0565, 0.8977],
[2.0239, 11.1609],
[2.0041, 1.0995],
[2.0036, 10.9587],
[2.0036, 10.7711],
[2.0036, 10.5736],
[2.0036, 10.2375],
[2.0036, 10.0695],
[2.0036, 9.9015],
[2.0036, 9.7334],
[2.0036, 2.6365],
[2.0036, 2.3004],
[2.0036, 2.1324],
[2.0036, 1.9644],
[2.0036, 1.7964],
[2.0036, 1.6283],
[2.0036, 1.2923],
[1.9858, 11.4877],
[1.8804, 0.8181],
[1.849, 11.2477],
[1.811, 1.0754],
[1.8093, 11.0291],
[1.8092, 10.8137],
[1.8092, 10.5768],
[1.8092, 10.2407],
[1.8092, 10.0727],
[1.8092, 9.9047],
[1.8092, 9.7367],
[1.8092, 9.5686],
[1.8092, 2.3004],
[1.8092, 2.1324],
[1.8092, 1.9644],
[1.8092, 1.7964],
[1.8092, 1.6283],
[1.8092, 1.2923],
];

function plotPoints(sorted) {
	drawDot(0, "#00FF00", sorted);  //start point green
	for(var i=1;i<points.length-1;i++){
		drawDot(i, "#666666", sorted);  //intermediate points gray
	}
	drawDot(points.length-1, "#FF0000", sorted);  //end point red
}

function drawDot(num, color, sorted) {
	var canvas = document.getElementById("myCanvas");
	var ctx = canvas.getContext("2d");
	ctx.fillStyle = color;
    ctx.beginPath();
    ctx.arc(points[num][0]*multiplier, points[num][1]*multiplier, 4, 0, Math.PI * 2, true); // Outer circle
    ctx.fill();

	if (num > 0) {  //draw the path from last point to this one
		ctx.strokeStyle = (sorted) ? "#CCCCCC" : "#CCCC00";
		ctx.lineWidth = (sorted) ? 3 : 2;
		ctx.beginPath();
		ctx.moveTo(points[num][0]*multiplier, points[num][1]*multiplier);
		ctx.lineTo(points[num-1][0]*multiplier, points[num-1][1]*multiplier);
		ctx.stroke();
	}

}

//optimize the points array for minimal travel
function sortPoints() {
	var tmp = [...points];
	var cur = new Array();
	cur[0] = tmp.shift();  //never change the starting point
	var len = tmp.length;
	for (var i=0;i<len;i++){
		var d = dist(cur[cur.length-1],tmp[0]);
		var n = 0;
		for (var j=1;j<tmp.length;j++){
			dtmp = dist(cur[cur.length-1],tmp[j]);
			if (dtmp < d) {  //if this distance is less than the first, remember it
				d = dtmp;
				n = j;
			}
		}
		cur[cur.length] = tmp.splice(n,1)[0];  //add closest point to our final array
	}
	return cur;
}

//distance between two points
function dist(p1, p2) {
		return Math.sqrt(Math.pow(Math.abs(p1[0]-p2[0]),2) + Math.pow(Math.abs(p1[1]-p2[1]),2));
}

//total distance
function tDist() {
	var d = 0;
	for (var i=1; i<points.length; i++){
		d += dist(points[i-1], points[i]);
	}
	return d;
}

//stuff to do when page loads
function doIt() {
	var canvas = document.getElementById("myCanvas");
	var ctx = canvas.getContext("2d");
	ctx.translate(0, canvas.height); //the HTML canvas Y axis is the reverse of most CNCs.
	ctx.scale(1, -1);	
	plotPoints(1);  //show unsorted path
	console.log(tDist());
	points = sortPoints(); //sort
	plotPoints(0);  //show sorted path
	console.log(tDist());
	gCode();  //update the Gcode



	
}

//write the gCode
function gCode() {
	codearea = document.getElementById('code');
	/*start the preamble:
	G20 Inches  G91.1 Incemental IJK mode G40 Cutter radius compensation off  T0 M6 wait for toolhead  G17 X/Y plane  M3 start spindle
	*/
	code.value=`

G20 G91.1 G40

G0 Z0.2
T0 M6
G17
M3
`;
	//hard-coding safety height of .2, hole depth of .5, plunge rate of 20ipm
	for(var i=0; i < points.length; i++){
		code.value += `G0 X`+points[i][0]+` Y`+points[i][1]+`
G1 Z-0.5 F20
G1 Z0 F20
G0 Z0.2
`;
	}	

}




